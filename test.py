import math

letter_to_walls = {
    "i": (1, 3),
    "_": (0, 2),
    "p": (1, 2),
    "o": (2, 3),
    "m": (0, 1),
    "l": (0, 3),
    "z": (1, 2, 3),
    "q": (0, 2, 3),
    "s": (0, 1, 3),
    "d": (0, 1, 2),
    "f": (),
    "g": (0, 1, 2, 3),
    "u": (0,),
    "j": (2,),
    "h": (3,),
    "k": (1,),
}


def letter_to_all_data(letter: str):
    return letter


output = []
world_width = 18
"i________k____k__iim___im_hik__lii_o"
for i, letter in enumerate(
    "im_________u_____lik_________k____liiim______liim___hiish_____liiiid__oi"
):
    print()
    output.append(
        (
            (math.floor(i / (world_width)), i % 18),
            letter_to_all_data(letter),
        )
    )

print(output)

# ((0, 0), ("i", (1, 3))),
# ((0, 2), ("_", (0, 2))),
# ((0, 2), ("_", (0, 2))),
# ((0, 4), ("_", (0, 2))),
# ((0, 4), ("_", (0, 2))),
# ((0, 6), ("_", (0, 2))),
# ((0, 6), ("_", (0, 2))),
# ((0, 8), ("_", (0, 2))),
# ((0, 8), ("_", (0, 2))),
# ((1, 1), ("k", (1,))),
# ((1, 1), ("_", (0, 2))),
# ((1, 3), ("_", (0, 2))),
# ((1, 3), ("_", (0, 2))),
# ((1, 5), ("_", (0, 2))),
# ((1, 5), ("k", (1,))),
# ((1, 7), ("_", (0, 2))),
# ((1, 7), ("_", (0, 2))),
# ((1, 9), ("i", (1, 3))),
# ((2, 0), ("i", (1, 3))),
# ((2, 2), ("m", (0, 1))),
# ((2, 2), ("_", (0, 2))),
# ((2, 4), ("_", (0, 2))),
# ((2, 4), ("_", (0, 2))),
# ((2, 6), ("i", (1, 3))),
# ((2, 6), ("m", (0, 1))),
# ((2, 8), ("_", (0, 2))),
# ((2, 8), ("h", (3,))),
# ((3, 1), ("i", (1, 3))),
# ((3, 1), ("k", (1,))),
# ((3, 3), ("_", (0, 2))),
# ((3, 3), ("_", (0, 2))),
# ((3, 5), ("l", (0, 3))),
# ((3, 5), ("i", (1, 3))),
# ((3, 7), ("i", (1, 3))),
# ((3, 7), ("_", (0, 2))),
# ((3, 9), ("o", (2, 3))),

map = [
    ((0, 0), "i"),
    ((0, 1), "m"),
    ((0, 2), "_"),
    ((0, 3), "_"),
    ((0, 4), "_"),
    ((0, 5), "_"),
    ((0, 6), "_"),
    ((0, 7), "_"),
    ((0, 8), "_"),
    ((0, 9), "_"),
    ((0, 10), "_"),
    ((0, 11), "u"),
    ((0, 12), "_"),
    ((0, 13), "_"),
    ((0, 14), "_"),
    ((0, 15), "_"),
    ((0, 16), "_"),
    ((0, 17), "l"),
    ((1, 0), "i"),
    ((1, 1), "k"),
    ((1, 2), "_"),
    ((1, 3), "_"),
    ((1, 4), "_"),
    ((1, 5), "_"),
    ((1, 6), "_"),
    ((1, 7), "_"),
    ((1, 8), "_"),
    ((1, 9), "_"),
    ((1, 10), "_"),
    ((1, 11), "k"),
    ((1, 12), "_"),
    ((1, 13), "_"),
    ((1, 14), "_"),
    ((1, 15), "_"),
    ((1, 16), "l"),
    ((1, 17), "i"),
    ((2, 0), "i"),
    ((2, 1), "i"),
    ((2, 2), "m"),
    ((2, 3), "_"),
    ((2, 4), "_"),
    ((2, 5), "_"),
    ((2, 6), "_"),
    ((2, 7), "_"),
    ((2, 8), "_"),
    ((2, 9), "l"),
    ((2, 10), "i"),
    ((2, 11), "i"),
    ((2, 12), "m"),
    ((2, 13), "_"),
    ((2, 14), "_"),
    ((2, 15), "_"),
    ((2, 16), "h"),
    ((2, 17), "i"),
    ((3, 0), "i"),
    ((3, 1), "s"),
    ((3, 2), "h"),
    ((3, 3), "_"),
    ((3, 4), "_"),
    ((3, 5), "_"),
    ((3, 6), "_"),
    ((3, 7), "_"),
    ((3, 8), "l"),
    ((3, 9), "i"),
    ((3, 10), "i"),
    ((3, 11), "i"),
    ((3, 12), "i"),
    ((3, 13), "d"),
    ((3, 14), "_"),
    ((3, 15), "_"),
    ((3, 16), "o"),
    ((3, 17), "i"),
]
